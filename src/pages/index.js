import NewsLetter from "@/components/NewsLetter";
import { base64ToUint8Array } from "@/utils/base64ToUint8Array";
import { BellIcon, ChatIcon, CloseIcon } from "@chakra-ui/icons";
import { Button } from "@chakra-ui/react";
import Head from "next/head";
import { useEffect, useState } from "react";

export default function Home() {
  const [registration, setRegistration] = useState(null);

  const [isSubscribed, setIsSubscribed] = useState(false);
  const [subscription, setSubscription] = useState(null);
  useEffect(() => {
    if (
      typeof window !== "undefined" &&
      "serviceWorker" in navigator &&
      window.workbox !== undefined
    ) {
      navigator.serviceWorker.ready.then((reg) => {
        const pushManager = reg?.pushManager;
        if (pushManager) {
          pushManager.getSubscription().then((sub) => {
            if (sub) {
              setSubscription(sub);
              setIsSubscribed(true);
            }
          });
        }

        setRegistration(reg);
      });
    }
  }, []);

  const requestNotificationPermission = async () => {
    if ("Notification" in window) {
      try {
        const permission = await Notification.requestPermission();

        if (permission === "granted") {
          console.log("Notification permission granted.");
        } else {
          console.log("Notification permission denied.");
        }
      } catch (error) {
        console.error("Error requesting notification permission:", error);
      }
    } else {
      console.log("Notifications not supported by this browser.");
    }
  };

  const subscribeButtonOnClick = async (event) => {
    event.preventDefault();
    await requestNotificationPermission();
    const sub = await registration.pushManager.subscribe({
      userVisibleOnly: true,
      applicationServerKey: base64ToUint8Array(
        process.env.NEXT_PUBLIC_WEB_PUSH_PUBLIC_KEY
      ),
    });
    // TODO: you should call your API to save subscription data
    //       on server in order to send web push notification from server
    setSubscription(sub);
    setIsSubscribed(true);
    console.log("web push subscribed!");
    console.log(sub);
  };

  const unsubscribeButtonOnClick = async (event) => {
    event.preventDefault();
    await subscription.unsubscribe();
    // TODO: you should call your API to delete or invalidate subscription data on server
    setSubscription(null);
    setIsSubscribed(false);
    console.log("web push unsubscribed!");
  };

  const sendNotificationButtonOnClick = async (event) => {
    event.preventDefault();
    if (subscription == null) {
      console.error("web push not subscribed");
      return;
    }

    await fetch("/api/notification", {
      method: "POST",
      headers: {
        "Content-type": "application/json",
      },
      body: JSON.stringify({
        subscription,
      }),
    });
  };

  return (
    <>
      <Head>
        <title>Chakra + Push API</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <NewsLetter
          actionButtons={
            <>
              <Button
                colorScheme="telegram"
                onClick={subscribeButtonOnClick}
                disabled={isSubscribed}
                leftIcon={<BellIcon />}
              >
                Subscribe
              </Button>
              <Button
                onClick={sendNotificationButtonOnClick}
                disabled={!isSubscribed}
                colorScheme="whatsapp"
                leftIcon={<ChatIcon />}
              >
                Send Notification
              </Button>
              <Button
                onClick={unsubscribeButtonOnClick}
                disabled={!isSubscribed}
                colorScheme="gray"
                leftIcon={<CloseIcon />}
              >
                Unsubscribe
              </Button>
            </>
          }
        />
      </main>
    </>
  );
}
